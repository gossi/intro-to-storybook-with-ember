{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","taskbox/tests/acceptance/app-test.js","taskbox/tests/integration/pure-task-list-test.js","taskbox/tests/integration/task-test.js","taskbox/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"taskbox/tests/acceptance/app-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Acceptance| taskbox\", function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)(\"visiting /\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/\");\n      assert.equal((0, _testHelpers.currentURL)(), \"/\"); // assert.dom(\"h2\").hasText(\"Congratulations, you made it!\");\n    });\n  });\n});","define(\"taskbox/tests/integration/pure-task-list-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Integration | Component | <PureTaskList>\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const taskData = {\n      id: \"1\",\n      title: \"Test Task\",\n      state: \"TASK_INBOX\",\n      updatedAt: new Date(2018, 0, 1, 9, 0)\n    };\n    const tasklist = [{ ...taskData,\n      id: \"1\",\n      title: \"Task 1\"\n    }, { ...taskData,\n      id: \"2\",\n      title: \"Task 2\"\n    }, { ...taskData,\n      id: \"3\",\n      title: \"Task 3\"\n    }, { ...taskData,\n      id: \"4\",\n      title: \"Task 4\"\n    }, { ...taskData,\n      id: \"5\",\n      title: \"Task 5\"\n    }, { ...taskData,\n      id: \"6\",\n      title: \"Task 6 (pinned)\",\n      state: \"TASK_PINNED\"\n    }];\n    /* hooks.beforeEach(function() {\n      this.setProperties({\n        tasks: tasklist\n      });\n    }); */\n\n    (0, _qunit.test)(\"renders pinned tasks at the start of the list\", async function (assert) {\n      this.tasks = tasklist; // this.pinTask = sinon.stub();\n      // this.archiveTask = sinon.stub();\n      // // this.set(\"testpinTask\", (actual) => {\n      // //   console.log(`pinTask actual:${actual}`);\n      // //   let expected = 1;\n      // //   assert.deepEquals(actual, expected);\n      // // });\n      // this.set(\"testarchiveTask\", (actual) => {\n      //   console.log(`archiveTask actual:${actual}`);\n      //   let expected = 1;\n      //   assert.deepEquals(actual, expected);\n      // });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PureTaskList @tasks={{this.tasks}}/>\n      */\n      {\n        id: \"T4z4XlO8\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"pure-task-list\\\",[],[[\\\"@tasks\\\"],[[27,[24,0],[\\\"tasks\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      })); // /* const firstItem= this.element.querySelectorAll('.list-item').length */\n      // /* const firstItem= this.element.querySelector('.list-item:nth-of-type(1)').classList */\n\n      assert.dom('[data-test-task]:nth-of-type(1)').hasClass(\"TASK_PINNED\");\n      /* console.log(`firstItem:${JSON.stringify(firstItem,null,2)}`) */\n\n      /* console.log(`firstItem:${firstItem}`) */\n\n      /* assert.ok(1 == 1, \"one equals one\"); */\n    });\n    (0, _qunit.test)(\"can pin tasks\", async function (assert) {\n      this.tasks = tasklist;\n      this.pinTask = _sinon.default.spy();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <PureTaskList\n              @tasks={{this.tasks}}\n              @pinTask={{this.pinTask}}\n            />\n      */\n      {\n        id: \"xVH91u4w\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"pure-task-list\\\",[],[[\\\"@tasks\\\",\\\"@pinTask\\\"],[[27,[24,0],[\\\"tasks\\\"]],[27,[24,0],[\\\"pinTask\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.click)('[data-test-task]:nth-of-type(3) [data-test-task-pin]');\n      assert.ok(this.pinTask.calledOnce);\n    });\n  });\n});","define(\"taskbox/tests/integration/task-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\", \"sinon\"], function (_qunit, _emberQunit, _testHelpers, _sinon) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Integration | Component | <Task>\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const taskData = {\n      id: \"1\",\n      title: \"Test Task\",\n      state: \"TASK_INBOX\",\n      updatedAt: new Date(2018, 0, 1, 9, 0)\n    };\n    (0, _qunit.test)(\"renders tasks\", async function (assert) {\n      this.task = taskData;\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Task @task={{this.task}}/>\n      */\n      {\n        id: \"jkwMU0SL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"task\\\",[],[[\\\"@task\\\"],[[27,[24,0],[\\\"task\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-task]').exists();\n    });\n    (0, _qunit.test)(\"renders pinned task\", async function (assert) {\n      this.task = { ...taskData,\n        state: 'TASK_PINNED'\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Task @task={{this.task}}/>\n      */\n      {\n        id: \"jkwMU0SL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"task\\\",[],[[\\\"@task\\\"],[[27,[24,0],[\\\"task\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-task]').hasClass('TASK_PINNED');\n    });\n    (0, _qunit.test)(\"renders archived task\", async function (assert) {\n      this.task = { ...taskData,\n        state: 'TASK_ARCHIVE'\n      };\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Task @task={{this.task}}/>\n      */\n      {\n        id: \"jkwMU0SL\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"task\\\",[],[[\\\"@task\\\"],[[27,[24,0],[\\\"task\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      assert.dom('[data-test-task]').hasClass('TASK_ARCHIVE');\n    });\n    (0, _qunit.test)('can pin task', async function (assert) {\n      this.task = taskData;\n      this.pinTask = _sinon.default.spy();\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        <Task @task={{this.task}} @pin={{this.pinTask}}/>\n      */\n      {\n        id: \"eVvMgRjB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[7,\\\"task\\\",[],[[\\\"@task\\\",\\\"@pin\\\"],[[27,[24,0],[\\\"task\\\"]],[27,[24,0],[\\\"pinTask\\\"]]]],null]],\\\"hasEval\\\":false,\\\"upvars\\\":[]}\",\n        meta: {}\n      }));\n      await (0, _testHelpers.click)('[data-test-task-pin]');\n      assert.ok(this.pinTask.calledOnce);\n    });\n  });\n});","define(\"taskbox/tests/test-helper\", [\"taskbox/app\", \"taskbox/config/environment\", \"@ember/test-helpers\", \"ember-qunit\", \"ember-sinon-qunit\"], function (_app, _environment, _testHelpers, _emberQunit, _emberSinonQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberSinonQunit.default)();\n  (0, _emberQunit.start)();\n});","define('taskbox/config/environment', [], function() {\n  var prefix = 'taskbox';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('taskbox/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}