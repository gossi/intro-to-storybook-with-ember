{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","taskbox/tests/acceptance/app-test.js","taskbox/tests/integration/task-list-test.js","taskbox/tests/test-helper.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define(\"taskbox/tests/acceptance/app-test\", [\"qunit\", \"@ember/test-helpers\", \"ember-qunit\"], function (_qunit, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _qunit.module)(\"Acceptance| taskbox\", function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _qunit.test)(\"visiting /\", async function (assert) {\n      await (0, _testHelpers.visit)(\"/\");\n      assert.equal((0, _testHelpers.currentURL)(), \"/\");\n      assert.dom(\"h2\").hasText(\"Congratulations, you made it!\");\n    });\n  });\n});","define(\"taskbox/tests/integration/task-list-test\", [\"qunit\", \"ember-qunit\", \"@ember/test-helpers\"], function (_qunit, _emberQunit, _testHelpers) {\n  \"use strict\";\n\n  /* import hbs from \"htmlbars-inline-precompile\"; */\n  (0, _qunit.module)(\"Integration | Component | TaskList\", function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n    const taskData = {\n      id: \"1\",\n      title: \"Test Task\",\n      state: \"TASK_INBOX\",\n      updatedAt: new Date(2018, 0, 1, 9, 0)\n    };\n    const tasklist = [{ ...taskData,\n      id: \"1\",\n      title: \"Task 1\"\n    }, { ...taskData,\n      id: \"2\",\n      title: \"Task 2\"\n    }, { ...taskData,\n      id: \"3\",\n      title: \"Task 3\"\n    }, { ...taskData,\n      id: \"4\",\n      title: \"Task 4\"\n    }, { ...taskData,\n      id: \"5\",\n      title: \"Task 5\"\n    }, { ...taskData,\n      id: \"6\",\n      title: \"Task 6 (pinned)\",\n      state: \"TASK_PINNED\"\n    }];\n    /* hooks.beforeEach(function() {\n      this.setProperties({\n        tasks: tasklist\n      });\n    }); */\n\n    (0, _qunit.test)(\"renders pinned tasks at the start of the list\", async function (assert) {\n      this.set(\"tasks\", tasklist);\n      this.set(\"testpinTask\", actual => {\n        console.log(`pinTask actual:${actual}`);\n        let expected = 1;\n        assert.deepEquals(actual, expected);\n      });\n      this.set(\"testarchiveTask\", actual => {\n        console.log(`archiveTask actual:${actual}`);\n        let expected = 1;\n        assert.deepEquals(actual, expected);\n      });\n      await (0, _testHelpers.render)(Ember.HTMLBars.template(\n      /*\n        {{TaskList tasks=tasks pinTask=(action testpinTask) archiveTask=(action testarchiveTask) }}\n      */\n      {\n        id: \"iECMgZNB\",\n        block: \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,0,0,0,[31,2,8,[27,[26,4,\\\"CallHead\\\"],[]],null,[[\\\"tasks\\\",\\\"pinTask\\\",\\\"archiveTask\\\"],[[27,[26,3,\\\"Expression\\\"],[]],[31,32,6,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[24,0],[]],[27,[26,2,\\\"Expression\\\"],[]]],null],[31,65,6,[27,[26,1,\\\"CallHead\\\"],[]],[[27,[24,0],[]],[27,[26,0,\\\"Expression\\\"],[]]],null]]]]]],\\\"hasEval\\\":false,\\\"upvars\\\":[\\\"testarchiveTask\\\",\\\"action\\\",\\\"testpinTask\\\",\\\"tasks\\\",\\\"TaskList\\\"]}\",\n        meta: {}\n      })\n      /* hbs`<task-list @tasks={{this.tasks}}` */\n      );\n      /* const firstItem= this.element.querySelectorAll('.list-item').length */\n\n      /* const firstItem= this.element.querySelector('.list-item:nth-of-type(1)').classList */\n\n      assert.dom(this.element.querySelector(\".list-item:nth-of-type(1)\")).hasClass(\"TASK_PINNED\");\n      /* console.log(`firstItem:${JSON.stringify(firstItem,null,2)}`) */\n\n      /* console.log(`firstItem:${firstItem}`) */\n\n      /* assert.ok(1 == 1, \"one equals one\"); */\n    });\n  });\n});","define(\"taskbox/tests/test-helper\", [\"taskbox/app\", \"taskbox/config/environment\", \"@ember/test-helpers\", \"ember-qunit\"], function (_app, _environment, _testHelpers, _emberQunit) {\n  \"use strict\";\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n  (0, _emberQunit.start)();\n});","define('taskbox/config/environment', [], function() {\n  var prefix = 'taskbox';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(decodeURIComponent(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('taskbox/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}